name: ðŸš€ Deploy to Self-Hosted Ubuntu | VPS Sieu Toc

on:
  push:
    branches:
      - develop
      # - release/uat

jobs:
  deploy-backend:
    runs-on: [self-hosted, vpssieutoc-1]
    # if: contains(github.event.head_commit.modified, 'backend/') || contains(github.event.head_commit.modified, 'docker-compose.yml') || contains(github.event.head_commit.modified, '.github/workflows/')
    steps:
      - name: Fix permissions
        run: |
          sudo chown -R cicd:cicd /home/cicd/actions-runner/_work
          sudo chmod -R u+rwX /home/cicd/actions-runner/_work

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create api .env from GitHub Secrets
        run: |
          cat <<EOF > backend/.env
          MONGO_URI=${{ secrets.MONGO_URI }}
          BASE_API_URL=${{ secrets.BASE_API_URL }}
          CLIENT_ORIGIN=${{ secrets.CLIENT_ORIGIN }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          EOF

      - name: Create root .env from GitHub Secrets
        run: |
          cat <<EOF > .env
          API_PORT=5000
          CLIENT_PORT=3000
          MINIO_URL=${{ secrets.MINIO_URL }}
          MINIO_API_PORT=${{ secrets.MINIO_API_PORT }}
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          BUCKET_NAME=${{ secrets.BUCKET_NAME }}
          EOF

      # make a clean build
      - name: Shut down existing backend containers
        run: |
          docker-compose -p vrm -f docker-compose.yml stop backend minio || true
          docker-compose -p vrm -f docker-compose.yml down --remove-orphans

      - name: Build and start backend Docker services
        run: docker-compose -p vrm -f docker-compose.yml up -d --build

  # build on Github Ubuntu to save the resource
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create client frontend/.env
        run: |
          cat <<EOF > .env
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          EOF

      - name: Build frontend
        run: |
          cd frontend
          npm install --legacy-peer-deps
          npm run build
          cp nginx.conf dist/

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  deploy-frontend:
    runs-on: [self-hosted, vpssieutoc-1]
    needs: build-frontend
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Prepare nginx deploy path
        run: |
          sudo mkdir -p /var/www/vrm_app/frontend
          sudo chown -R cicd:cicd /var/www/vrm_app/frontend

      - name: Deploy frontend to nginx folder
        run: |
          sudo rm -rf /var/www/vrm_app/frontend/dist
          sudo cp -r dist /var/www/vrm_app/frontend/dist
          sudo cp -r dist/nginx.conf /etc/nginx/sites-available/vrm_app
          sudo ln -sf /etc/nginx/sites-available/vrm_app /etc/nginx/sites-enabled/
          sudo nginx -t
          sudo systemctl restart nginx
