name: ðŸš€ Deploy to Self-Hosted Server | VPS Sieu Toc

on:
  push:
    branches:
      - develop
      # - release/uat

env:
  PROJECT_NAME: "vrm_app"
  NGINX_SERVER_NAME: ${{ secrets.NGINX_SERVER_NAME }}
  MONGO_URI: ${{ secrets.MONGO_URI }}
  BASE_API_URL: ${{ secrets.BASE_API_URL }}
  API_PORT: 5000
  CLIENT_ORIGIN: ${{ secrets.CLIENT_ORIGIN }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  CLIENT_PORT: 3000
  VITE_API_URL: ${{ secrets.VITE_API_URL }}
  MINIO_URL: ${{ secrets.MINIO_URL }}
  MINIO_API_PORT: ${{ secrets.MINIO_API_PORT }}
  MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
  MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}

jobs:
  deploy-backend:
    runs-on: [self-hosted, vpssieutoc-1]
    steps:
      - name: Fix permissions
        run: |
          sudo chown -R cicd:cicd /home/cicd/actions-runner/_work
          sudo chmod -R u+rwX /home/cicd/actions-runner/_work

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create api .env from GitHub Secrets
        run: |
          cat <<EOF > backend/.env
          MONGO_URI=${{ env.MONGO_URI }}
          BASE_API_URL=${{ env.BASE_API_URL }}
          CLIENT_ORIGIN=${{ env.CLIENT_ORIGIN }}
          JWT_SECRET=${{ env.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ env.JWT_REFRESH_SECRET }}
          EOF

      - name: Create root .env from GitHub Secrets
        run: |
          cat <<EOF > .env
          API_PORT=${{ env.API_PORT }}
          CLIENT_PORT=${{ env.CLIENT_PORT }}
          MINIO_URL=${{ env.MINIO_URL }}
          MINIO_API_PORT=${{ env.MINIO_API_PORT }}
          MINIO_ROOT_USER=${{ env.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ env.MINIO_ROOT_PASSWORD }}
          BUCKET_NAME=${{ env.BUCKET_NAME }}
          EOF

      # Make a clean build
      - name: Shut down existing backend containers
        run: |
          docker-compose -p vrm -f docker-compose.yml stop backend || true
          docker-compose -p vrm -f docker-compose.yml down --remove-orphans
      - name: Build and start backend Docker service only
        run: docker-compose -p vrm -f docker-compose.yml up -d --build backend

  # build on Github Ubuntu to save the resource
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Create client frontend/.env
        run: |
          cat <<EOF > frontend/.env
          VITE_API_URL=${{ env.VITE_API_URL }}
          EOF
      #
      - name: Build frontend
        run: |
          cd frontend
          npm install --legacy-peer-deps
          npm run build
          # Replace placeholder with actual server name
          sed -i "s/\${NGINX_SERVER_NAME}/${{ env.NGINX_SERVER_NAME }}/g" nginx.conf
          sed -i "s/\${BASE_API_URL}/\${{ env.BASE_API_URL }}/g" nginx.conf
          cp nginx.conf dist/
          cp .env dist/

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  deploy-frontend:
    runs-on: [self-hosted, vpssieutoc-1]
    needs: build-frontend
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Prepare nginx deploy path
        run: |
          sudo mkdir -p /var/www/${{ env.PROJECT_NAME }}/frontend
          sudo chown -R cicd:cicd /var/www/${{ env.PROJECT_NAME }}/frontend

      - name: Deploy frontend to nginx folder
        run: |
          sudo rm -rf /var/www/${{ env.PROJECT_NAME }}/frontend/dist
          sudo cp -r dist /var/www/${{ env.PROJECT_NAME }}/frontend/dist
          sudo cp -r dist/nginx.conf /etc/nginx/sites-available/${{ env.PROJECT_NAME }}
          sudo ln -sf /etc/nginx/sites-available/${{ env.PROJECT_NAME }} /etc/nginx/sites-enabled/
          sudo nginx -t
          sudo systemctl restart nginx

      - name: Clean up downloaded artifacts
        if: success()
        run: |
          # Clean up downloaded artifacts from runner
          rm -rf dist
          # Clean up any temporary files
          rm -rf /tmp/${{ env.PROJECT_NAME }}-* || true
